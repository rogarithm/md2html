diff --git a/append_string_ubuntu.rb b/append_string_ubuntu.rb
index fca8c3d..834c7ff 100755
--- a/append_string_ubuntu.rb
+++ b/append_string_ubuntu.rb
@@ -1,7 +1,7 @@
 #!/usr/bin/env ruby
 
 #lib 디렉토리 아래 루비 파일을 찾는다
-file_list = `find ./lib -name '*.rb'`.split("\n")
+file_list = `find ./lib/md2html/tokenizer -name '*.rb'`.split("\n")
 
 #ruby_file = 'lib/generator/visitors/bold_visitor.rb'
 #각 루비 파일마다
diff --git a/lib/md2html/tokenizer.rb b/lib/md2html/tokenizer.rb
index dddce32..16adb49 100644
--- a/lib/md2html/tokenizer.rb
+++ b/lib/md2html/tokenizer.rb
@@ -9,35 +9,37 @@ require_relative 'tokenizer/token_list'
 #   "_Hi!_" => [{type: UNDERSCORE, value: '_'}, {type: TEXT, value: 'Hi!'},
 #               {type: UNDERSCORE, value: '_'}]
 
-class Tokenizer
-  TOKEN_SCANNERS = [
-    SimpleScanner, # Recognizes simple one-char tokens like `_` and `*`
-    TextScanner    # Recognizes everything but a simple token
-  ].freeze
+module Md2Html
+  class Tokenizer
+    TOKEN_SCANNERS = [
+      SimpleScanner, # Recognizes simple one-char tokens like `_` and `*`
+      TextScanner    # Recognizes everything but a simple token
+    ].freeze
 
-  def tokenize(plain_markdown)
-    tokens_array = tokens_as_array(plain_markdown)
-    TokenList.new(tokens_array)
-  end
+    def tokenize(plain_markdown)
+      tokens_array = tokens_as_array(plain_markdown)
+      TokenList.new(tokens_array)
+    end
 
-  private
+    private
 
-  def tokens_as_array(plain_markdown)
-    if plain_markdown.nil? || plain_markdown == ''
-      [Token.end_of_file]
-    else
-      token = scan_one_token(plain_markdown)
-      [token] + tokens_as_array(plain_markdown[token.length..-1])
+    def tokens_as_array(plain_markdown)
+      if plain_markdown.nil? || plain_markdown == ''
+        [Token.end_of_file]
+      else
+        token = scan_one_token(plain_markdown)
+        [token] + tokens_as_array(plain_markdown[token.length..-1])
+      end
     end
-  end
 
-  def scan_one_token(plain_markdown)
-    TOKEN_SCANNERS.each do |scanner|
-      #puts "SCANNER TYPE: #{scanner}"
-      token = scanner.from_string(plain_markdown)
-      #puts "RETRIEVED TOKEN: #{token}"
-      return token unless token.null?
+    def scan_one_token(plain_markdown)
+      TOKEN_SCANNERS.each do |scanner|
+        #puts "SCANNER TYPE: #{scanner}"
+        token = scanner.from_string(plain_markdown)
+        #puts "RETRIEVED TOKEN: #{token}"
+        return token unless token.null?
+      end
+      raise "The scanners could not match the given input: #{plain_markdown}"
     end
-    raise "The scanners could not match the given input: #{plain_markdown}"
   end
 end
diff --git a/lib/md2html/tokenizer/null_token.rb b/lib/md2html/tokenizer/null_token.rb
index 98786a8..4253483 100644
--- a/lib/md2html/tokenizer/null_token.rb
+++ b/lib/md2html/tokenizer/null_token.rb
@@ -1,11 +1,15 @@
 # A "null token". Follows the Nullable Object Pattern.
 
-class NullToken
-  def null?
-    true
-  end
+module Md2Html
+  module Tokenizer
+    class NullToken
+      def null?
+        true
+      end
 
-  def present?
-    false
+      def present?
+        false
+      end
+    end
   end
 end
diff --git a/lib/md2html/tokenizer/simple_scanner.rb b/lib/md2html/tokenizer/simple_scanner.rb
index e34371c..d019f87 100644
--- a/lib/md2html/tokenizer/simple_scanner.rb
+++ b/lib/md2html/tokenizer/simple_scanner.rb
@@ -5,19 +5,23 @@ require_relative 'token'
 #
 # Eg: SimpleToken.from_string("_foo") => #<Token type:'UNDERSCORE', value: '_'>
 #     SimpleToken.from_string("foo")  => #<NullToken>
-#
-class SimpleScanner
-  TOKEN_TYPES = {
-    '_'  => 'UNDERSCORE',
-    '-'  => 'DASH',
-    '*'  => 'STAR',
-    "\n" => 'NEWLINE'
-  }.freeze
 
-  def self.from_string(plain_markdown)
-    char = plain_markdown[0]
-    Token.new(type: TOKEN_TYPES[char], value: char)
-  rescue InvalidTokenError
-    Token.null
+module Md2Html
+  module Tokenizer
+    class SimpleScanner
+      TOKEN_TYPES = {
+        '_'  => 'UNDERSCORE',
+        '-'  => 'DASH',
+        '*'  => 'STAR',
+        "\n" => 'NEWLINE'
+      }.freeze
+
+      def self.from_string(plain_markdown)
+        char = plain_markdown[0]
+        Token.new(type: TOKEN_TYPES[char], value: char)
+      rescue InvalidTokenError
+        Token.null
+      end
+    end
   end
 end
diff --git a/lib/md2html/tokenizer/text_scanner.rb b/lib/md2html/tokenizer/text_scanner.rb
index 611ac34..2bbe736 100644
--- a/lib/md2html/tokenizer/text_scanner.rb
+++ b/lib/md2html/tokenizer/text_scanner.rb
@@ -4,14 +4,18 @@ require_relative 'simple_scanner'
 # A simple text scanner, it basically selects everything the simple scanner
 # does not.
 
-class TextScanner < SimpleScanner
-  def self.from_string(plain_markdown)
-    text = plain_markdown
-           .each_char
-           .take_while { |char| SimpleScanner.from_string(char).null? }
-           .join('')
-    Token.new(type: 'TEXT', value: text)
-  rescue InvalidTokenError
-    Token.null
+module Md2Html
+  module Tokenizer
+    class TextScanner < SimpleScanner
+      def self.from_string(plain_markdown)
+        text = plain_markdown
+          .each_char
+          .take_while { |char| SimpleScanner.from_string(char).null? }
+          .join('')
+        Token.new(type: 'TEXT', value: text)
+      rescue InvalidTokenError
+        Token.null
+      end
+    end
   end
 end
diff --git a/lib/md2html/tokenizer/token.rb b/lib/md2html/tokenizer/token.rb
index 94195b7..b8bf321 100644
--- a/lib/md2html/tokenizer/token.rb
+++ b/lib/md2html/tokenizer/token.rb
@@ -3,37 +3,41 @@ require_relative 'null_token'
 # A base token. The tokenizer returns an array of these. Each token has a type
 # and a value. None can be nil.
 
-class Token
-  attr_reader :type, :value
-  def initialize(type:, value:)
-    @type = type
-    @value = value
-    raise InvalidTokenError if value.nil? || type.nil?
-  end
-
-  def self.null
-    NullToken.new
-  end
-
-  def self.end_of_file
-    Token.new(type: 'EOF', value: '')
-  end
-
-  def length
-    value.length
-  end
-
-  def null?
-    false
-  end
-
-  def present?
-    true
-  end
-
-  def to_s
-    "<type: #{type}, value: #{value}>"
+module Md2Html
+  module Tokenizer
+    class Token
+      attr_reader :type, :value
+      def initialize(type:, value:)
+        @type = type
+        @value = value
+        raise InvalidTokenError if value.nil? || type.nil?
+      end
+
+      def self.null
+        NullToken.new
+      end
+
+      def self.end_of_file
+        Token.new(type: 'EOF', value: '')
+      end
+
+      def length
+        value.length
+      end
+
+      def null?
+        false
+      end
+
+      def present?
+        true
+      end
+
+      def to_s
+        "<type: #{type}, value: #{value}>"
+      end
+    end
+
+    class InvalidTokenError < RuntimeError; end
   end
 end
-
-class InvalidTokenError < RuntimeError; end
diff --git a/lib/md2html/tokenizer/token_list.rb b/lib/md2html/tokenizer/token_list.rb
index b5f76a9..01a05b9 100644
--- a/lib/md2html/tokenizer/token_list.rb
+++ b/lib/md2html/tokenizer/token_list.rb
@@ -1,53 +1,57 @@
-class TokenList
-  include Enumerable
-
-  attr_reader :tokens
-  def initialize(tokens)
-    @tokens = tokens
-  end
-
-  def each(&block)
-    tokens.each(&block)
-  end
-
-  def peek_or(*choices)
-    choices.each do |tokens|
-      return true if peek(*tokens)
+module Md2Html
+  module Tokenizer
+    class TokenList
+      include Enumerable
+
+      attr_reader :tokens
+      def initialize(tokens)
+        @tokens = tokens
+      end
+
+      def each(&block)
+        tokens.each(&block)
+      end
+
+      def peek_or(*choices)
+        choices.each do |tokens|
+          return true if peek(*tokens)
+        end
+        false
+      end
+
+      def peek(*types)
+        types.each_with_index do |type, index|
+          return false if tokens.empty?
+          return false if type != tokens[index].type
+        end
+        true
+      end
+
+      def peek_at(index, *types)
+        return offset(index).peek(*types)
+      end
+
+      def grab!(amount)
+        raise "Invalid amount requested" if amount > tokens.length
+        tokens.shift(amount)
+      end
+
+      def offset(index)
+        return self if index.zero?
+        TokenList.new(tokens[index..-1])
+      end
+
+      def second
+        tokens[1]
+      end
+
+      def third
+        tokens[2]
+      end
+
+      def to_s
+        "[\n\t#{tokens.map(&:to_s).join(",\n\t")}\n]"
+      end
     end
-    false
-  end
-
-  def peek(*types)
-    types.each_with_index do |type, index|
-      return false if tokens.empty?
-      return false if type != tokens[index].type
-    end
-    true
-  end
-
-  def peek_at(index, *types)
-    return offset(index).peek(*types)
-  end
-
-  def grab!(amount)
-    raise "Invalid amount requested" if amount > tokens.length
-    tokens.shift(amount)
-  end
-
-  def offset(index)
-    return self if index.zero?
-    TokenList.new(tokens[index..-1])
-  end
-
-  def second
-    tokens[1]
-  end
-
-  def third
-    tokens[2]
-  end
-
-  def to_s
-    "[\n\t#{tokens.map(&:to_s).join(",\n\t")}\n]"
   end
 end
diff --git a/spec/token_list_spec.rb b/spec/token_list_spec.rb
index 7ae7564..823ebc6 100644
--- a/spec/token_list_spec.rb
+++ b/spec/token_list_spec.rb
@@ -3,9 +3,9 @@ Dir.glob('./lib/md2html/tokenizer/*.rb').each do |file|
 end
 require 'pry'
 
-describe TokenList do
+describe Md2Html::Tokenizer::TokenList do
   before(:each) do
-    @tokens = Tokenizer.new
+    @tokens = Md2Html::Tokenizer.new
     'Hi'
     '_Foo_'
     "Hello, World!
diff --git a/spec/tokenizer_spec.rb b/spec/tokenizer_spec.rb
index e576fa1..fa3072b 100644
--- a/spec/tokenizer_spec.rb
+++ b/spec/tokenizer_spec.rb
@@ -1,7 +1,7 @@
 require_relative '../lib/md2html/tokenizer'
 require 'pry'
 
-describe Tokenizer do
+describe Md2Html::Tokenizer do
   before(:each) do
     @tokenizer = Tokenizer.new
   end

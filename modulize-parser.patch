diff --git a/spec/concern_spec.rb b/spec/concern_spec.rb
index a7ddf85..2116412 100644
--- a/spec/concern_spec.rb
+++ b/spec/concern_spec.rb
@@ -1,15 +1,15 @@
 require_relative '../lib/md2html/parser/parser_factory'
 require 'pry'
 
-describe MatchesStar do
-  let(:ms) { Class.new { extend MatchesStar } }
-  let(:mf) { Class.new { extend MatchesFirst } }
-  let(:mp) { Class.new { extend MatchesPlus } }
+describe Md2Html::Parser::MatchesStar do
+  let(:ms) { Class.new { extend Md2Html::Parser::MatchesStar } }
+  let(:mf) { Class.new { extend Md2Html::Parser::MatchesFirst } }
+  let(:mp) { Class.new { extend Md2Html::Parser::MatchesPlus } }
 
   before(:each) do
-    @sentence_parser = ParserFactory.build(:sentence_parser)
-    @dash_parser = ParserFactory.build(:dash_parser)
-    @text_parser = ParserFactory.build(:text_parser)
+    @sentence_parser = Md2Html::Parser::ParserFactory.build(:sentence_parser)
+    @dash_parser = Md2Html::Parser::ParserFactory.build(:dash_parser)
+    @text_parser = Md2Html::Parser::ParserFactory.build(:text_parser)
   end
 
   it "matchesStar matches 0 or more" do
@@ -29,7 +29,7 @@ describe MatchesStar do
   it "matchesFirst matches only 1" do
     zero = Md2Html::Tokenizer::tokenize("\n")
     node = mf.match_first(zero, @dash_parser, @text_parser)
-    expect(node).to eq(Node.null)
+    expect(node).to eq(Md2Html::Parser::Node.null)
 
     one = Md2Html::Tokenizer::tokenize("ttt\n")
     node = mf.match_first(one, @dash_parser, @text_parser)
diff --git a/spec/generator_spec.rb b/spec/generator_spec.rb
index 5d15a94..32539fa 100644
--- a/spec/generator_spec.rb
+++ b/spec/generator_spec.rb
@@ -6,13 +6,12 @@ require 'pry'
 
 describe Generator do
   before(:each) do
-    @parser    = Parser.new
     @generator = Generator.new
   end
 
   def generate(markdown)
     tokens = Md2Html::Tokenizer::tokenize(markdown)
-    ast    = @parser.parse(tokens)
+    ast    = Md2Html::Parser::parse(tokens)
     @generator.generate(ast)
   end
 
diff --git a/spec/parser_spec.rb b/spec/parser_spec.rb
index dbd3378..c82d0e9 100644
--- a/spec/parser_spec.rb
+++ b/spec/parser_spec.rb
@@ -4,13 +4,10 @@ Dir.glob('./lib/md2html/parser/*.rb').each do |file|
 end
 require 'pry'
 
-describe Parser do
-  before(:each) do
-    @parser = Parser.new
-  end
+describe Md2Html::Parser do
 
   def parse(markdown)
-    @parser.parse(Md2Html::Tokenizer::tokenize(markdown))
+    Md2Html::Parser::parse(Md2Html::Tokenizer::tokenize(markdown))
   end
 
   it "makes node from markdown content" do
@@ -21,20 +18,20 @@ describe Parser do
 
   it "parse text that has dash character" do
     tokens = Md2Html::Tokenizer::tokenize("- foo")
-    nodes = @parser.parse(tokens)
+    nodes = parse(tokens)
     expect(nodes.consumed).to eq 3
   end
 
   it "list_item_parser parse one list item" do
     tokens = Md2Html::Tokenizer::tokenize("- foo\n")
-    parser = ParserFactory.build(:list_item_parser)
+    parser = Md2Html::Parser::ParserFactory.build(:list_item_parser)
     nodes = parser.match(tokens)
     expect(nodes.consumed).to eq 3
   end
 
   it "list_item_and_newline_parser parse one list item and newline" do
     tokens = Md2Html::Tokenizer::tokenize("- foo\n\n")
-    parser = ParserFactory.build(:list_item_and_newline_parser)
+    parser = Md2Html::Parser::ParserFactory.build(:list_item_and_newline_parser)
     nodes = parser.match(tokens)
     expect(nodes.consumed).to eq 4
   end
@@ -54,13 +51,13 @@ describe Parser do
 
   it "parse list items of the same level" do
     tokens = Md2Html::Tokenizer::tokenize("- foo\n- bar\n- baz\n")
-    nodes = @parser.parse(tokens)
+    nodes = parse(tokens)
     expect(nodes.consumed).to eq 10 #(dash text newline) * 3 + eof
   end
 
   it "parse plain paragraph and list items of the same level" do
     tokens = Md2Html::Tokenizer::tokenize("- foo\n- bar\n- baz\n\n__Foo__ and *text*.\n\nAnother para.")
-    nodes = @parser.parse(tokens)
+    nodes = parse(tokens)
     expect(nodes.consumed).to eq 24
   end
 end
